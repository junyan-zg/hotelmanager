<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
	http://www.springframework.org/schema/context
 	http://www.springframework.org/schema/context/spring-context.xsd"
 	>
 	<!-- <import resource="classpath:/config/spring/spring-common.xml" /> -->
 	
 	
 	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
 		<property name="configLocation" value="classpath:config/mybatis_spring/SqlMapConfig.xml"/>
	</bean>

<!-- 
	 dao1 原始编写dao的方法
	<bean id="user_mybatisDao1" class="com.mybatis.dao.dao1.User_mybatisDao1Impl">
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>
	
	dao2 通过代理对象方法生成mapper实现对象
	<bean id="user_mybatisDao2" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
		指定mapper地址
		<property name="mapperInterface" value="com.mybatis.dao.dao2.User_mybatisDao2"/>
	</bean>
 -->
	<!-- dao 使用自动扫描器 
	自动将mapper包中的mapper扫描出来，注册到spring容器中，bean的id是mapper的类名(第一个字母小写)
	-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.mybatis.dao"></property>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/> 
	</bean>
	
	
	<!-- 事务 
	对mybatis的事务管理，spring使用jdbc事务
	-->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	<!-- 通知 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="save" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="save*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="del*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="ex*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="up*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="sub*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="make*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="to*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="discard*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="pass*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="amend*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="no*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="get*" propagation="REQUIRED" read-only="true" />
			<tx:method name="count*" propagation="REQUIRED" read-only="true" />
			<tx:method name="find*" propagation="REQUIRED" read-only="true" />
			<tx:method name="list*" propagation="REQUIRED" read-only="true" />
			<tx:method name="*" read-only="true" />
		</tx:attributes>
	</tx:advice>
	<!-- aop -->
	<aop:config proxy-target-class="true">
		<aop:advisor advice-ref="txAdvice" pointcut="execution(* com.mybatis.service..*.*(..))"/>
	</aop:config>
</beans>







<!-- 还有一个 
execution (* com.cms.art.service.*.*(..))" 
要怎么写？

可以这样写：将execution分开写。 
<aop:config> 
<aop:pointcut id="allServiceMethod" expression="(execution (* com.cms.sys.service.*.*(..)))or (execution (* com.cms.art.service.*.*(..)))" />
<aop:advisor advice-ref="txAdvice" pointcut-ref="allServiceMethod" /> 
</aop:config> 

老外喜欢吧逻辑运算符用or，and ！写，国内一般用|| && !。 -->